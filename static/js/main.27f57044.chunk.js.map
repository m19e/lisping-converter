{"version":3,"sources":["libs/converter.ts","components/Converter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["kanaPairs","in","out","replaceHiragana","text","result","forEach","pair","Math","floor","random","split","join","Converter","useState","input","setInput","output","setOutput","className","onChange","e","currentTarget","value","placeholder","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAAMA,EAAY,CACd,CAAEC,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,gBAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,gBAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,eAAMC,IAAK,gBACjB,CAAED,GAAI,SAAKC,IAAK,gBAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,SAAKC,IAAK,UAChB,CAAED,GAAI,GAAIC,IAAK,KAOJ,SAASC,EAAgBC,GACpC,IAAIC,EAAS,GAAKD,EAQlB,OANAJ,EAAUM,SAAQ,SAACC,GANZC,KAAKC,MAAsB,GAAhBD,KAAKE,UAOD,IACdL,EAASA,EAAOM,MAAMJ,EAAKN,IAAIW,KAAKL,EAAKL,SAI1CG,EChCI,SAASQ,IAAa,IAAD,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,OAEJF,mBAAS,IAFL,mBAEzBG,EAFyB,KAEjBC,EAFiB,KAYhC,OACI,qCACI,qBAAKC,UAAU,iDAAf,SACI,0BACIC,SAZM,SAACC,GACnBL,EAASK,EAAEC,cAAcC,QAYbC,YAAY,6CACZL,UAAU,wEAGlB,qBAAKA,UAAU,mCAAf,SACI,wBACIM,QAAS,WAdrBP,EAAUf,EAAgBY,KAedI,UAAU,+LAFd,4BAOJ,qBAAKA,UAAU,iDAAf,SACI,0BACII,MAAON,EACPO,YAAY,yDACZL,UAAU,2ECjCf,SAASO,IACpB,OACI,sBAAKP,UAAU,8CAAf,UACI,qBAAKA,UAAU,mCAAf,SACI,oBAAIA,UAAU,+DAAd,sEAEJ,cAACN,EAAD,OCPZ,IAYec,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.27f57044.chunk.js","sourcesContent":["const kanaPairs = [\n    { in: \"ら\", out: \"ぁ\" },\n    { in: \"り\", out: \"ぃ\" },\n    { in: \"る\", out: \"ぅ\" },\n    { in: \"れ\", out: \"ぇ\" },\n    { in: \"ろ\", out: \"ぉ\" },\n    { in: \"い\", out: \"ふぃ\" },\n    { in: \"こ\", out: \"ほ\" },\n    { in: \"し\", out: \"ひ\" },\n    { in: \"す\", out: \"ひゅ\" },\n    { in: \"ぜ\", out: \"ぇ\" },\n    { in: \"せ\", out: \"へ\" },\n    { in: \"だ\", out: \"ら\" },\n    { in: \"ちゃ\", out: \"ひゃ\" },\n    { in: \"た\", out: \"ひゃ\" },\n    { in: \"つ\", out: \"ふ\" },\n    { in: \"て\", out: \"へ\" },\n    { in: \"と\", out: \"ほ\" },\n    { in: \"べ\", out: \"へ\" },\n    { in: \"\", out: \"\" },\n];\n\nconst getRandom = () => {\n    return Math.floor(Math.random() * 10);\n};\n\nexport default function replaceHiragana(text: string): string {\n    let result = \"\" + text;\n\n    kanaPairs.forEach((pair) => {\n        if (getRandom() < 5) {\n            result = result.split(pair.in).join(pair.out);\n        }\n    });\n\n    return result;\n}\n","import React, { useState } from \"react\";\nimport replaceHiragana from \"../libs/converter\";\n\nexport default function Converter() {\n    const [input, setInput] = useState(\"\");\n    const [output, setOutput] = useState(\"\");\n\n    const onInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setInput(e.currentTarget.value);\n    };\n\n    const convert = () => {\n        setOutput(replaceHiragana(input));\n    };\n\n    return (\n        <>\n            <div className=\"flex-grow flex justify-center items-center p-4\">\n                <textarea\n                    onChange={onInputChange}\n                    placeholder=\"テキストを入力\"\n                    className=\"h-full w-full max-w-4xl rounded-md resize-none focus:outline-none\"\n                ></textarea>\n            </div>\n            <div className=\"flex justify-center items-center\">\n                <button\n                    onClick={() => convert()}\n                    className=\"inline-block px-6 py-2 text-md font-medium leading-6 text-center text-black uppercase transition bg-gray-100 rounded-full shadow ripple hover:shadow-lg hover:bg-gray-200 focus:outline-none\"\n                >\n                    変換\n                </button>\n            </div>\n            <div className=\"flex-grow flex justify-center items-center p-4\">\n                <textarea\n                    value={output}\n                    placeholder=\"変換されたテキスト\"\n                    className=\"h-full w-full max-w-4xl rounded-md resize-none focus:outline-none\"\n                ></textarea>\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\nimport Converter from \"./components/Converter\";\n\nexport default function App() {\n    return (\n        <div className=\"flex flex-col w-screen h-screen bg-gray-200\">\n            <div className=\"flex justify-center items-center\">\n                <h1 className=\"m-2 text-2xl sm:text-5xl md:text-6xl lg:text-7xl xl:text-8xl\">舌足らず変換ツール</h1>\n            </div>\n            <Converter />\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}